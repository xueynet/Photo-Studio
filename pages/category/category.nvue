<template>
	<view class="page">
		<u-navbar
			:is-back="false"
			:background="{background:'#fff'}">
			<u-tabs-swiper ref="tabs" name="cate_name" count="cate_count" 
			inactive-color="#333" active-color="#e80000" bar-width="100"
			:list="tabs" 
			:bold="false"
			:current="current"
			@change="tabsChange"
			:is-scroll="false"></u-tabs-swiper>
		</u-navbar>
		<swiper class="tabswiper" 
			:current="swiperCurrent" 
			@transition="transition" 
			@animationfinish="animationfinish">
			<swiper-item class="swiper-item" v-for="(page,index0) in tabs" :key="index0">
				<scroll-view scroll-y class="swiper_scroll" v-if="page.type === 'server'">
					<view class="server" v-for="(item,index) in page.list" :key="index">
						<view class="card">
							<view class="fillbox">
								<view class="cardtitle">{{item.name}}</view>
								<view class="carddesc">{{item.desc}}</view>
							</view>
							<view class="cardgo" @click="navto('pages/server/list',item.id)">
								<u-icon size="40" color="#999" class="gobtn" name="arrow-rightward"></u-icon>
							</view>
						</view>
					</view>
				</scroll-view>
				<view class="u-menu-wrap" v-if="page.type === 'product'">
					<scroll-view scroll-y scroll-with-animation class="u-tab-view menu-scroll-view" :scroll-top="scrollTop"
					 :scroll-into-view="itemId">
						<view v-for="(item,index) in page.tabbar" :key="index" class="u-tab-item" :class="[categorycurrent == index ? 'u-tab-item-active' : '']"
						 @tap.stop="swichMenu(index)">
							<text class="u-line-1">{{item.name}}</text>
						</view>
					</scroll-view>
					<scroll-view :scroll-top="scrollRightTop" scroll-y scroll-with-animation class="right-box" @scroll="rightScroll">
						<view class="page-view">
							<view class="class-item" :id="'item' + index" v-for="(item,index) in page.tabbar" :key="index">
								<view class="item-title">
									<text>{{item.name}}</text>
								</view>
								<view class="item-container">
									<view @click="navto('pages/product/list',item1.id)" class="thumb-box" v-for="(item1, index1) in item.foods" :key="index1">
										<image class="item-menu-image" :src="item1.icon" mode=""></image>
										<view class="item-menu-name">{{item1.name}}</view>
									</view>
								</view>
							</view>
						</view>
					</scroll-view>
				</view>
				<view class="news_scroll" v-if="page.type === 'news'">
					<u-tabs-swiper 
						name="name" count="count"
						ref="newstabs" 
						inactive-color="#333" active-color="#da3c03" bar-width="100"
						:list="page.tablist" 
						:current="newscurrent" 
						@change="newstabsChange" 
						:is-scroll="false"></u-tabs-swiper>
					<scroll-view class="swiper_scroll" scroll-y>
						<view class="newspage">
							<view class="newsitem flex-row" v-for="(item,index) in newslist" :key="index">
								<view class="fillbox flex-col">
									<view class="title">{{item.title}}</view>
									<view class="flex-row">
										<view>{{item.soure}}</view>
										<view>{{item.adddate}}</view>
									</view>
								</view>
								<view class="image">
									<u-image height="180" width="220" :src="item.image"></u-image>
								</view>
							</view>
						</view>
					</scroll-view>
				</view>
			</swiper-item>
		</swiper>
	</view>
</template>

<script> 
	export default {
		data() {
			return {
				tabs: [
					{
						cate_name: '服务',
						cate_count: 0,
						type:'server',
						list:[],
					}, {
						cate_name: '产品',
						cate_count: 0,
						type:'product',
						tabbar:[]
					}, {
						cate_name: '新闻',
						cate_count: 0,
						type:'news',
						tablist:[
							{name:'相馆新闻',count: 0,
							newslist:[]},
							{name:'行业新闻',count: 0,
							newslist:[]},
						],
					},
				],
				current: 0,
				swiperCurrent: 0,
				newscurrent: 0,
				scrollTop: 0, //tab标题的滚动条位置
				oldScrollTop: 0,
				categorycurrent: 0, // 预设当前项的值
				menuHeight: 0, // 左边菜单的高度
				menuItemHeight: 0, // 左边菜单item的高度
				itemId: '', // 栏目右边scroll-view用于滚动的id
				menuItemPos: [],
				arr: [],
				scrollRightTop: 0, // 右边栏目scroll-view的滚动条高度
				timer: null, // 定时器
				newslist:[]
			}
		},
		onShow() {
			if (getApp().globalData.hasLogin && getApp().globalData.hasLaunch) {
				getApp().globalData.hasLaunch = false
				this.getdata()
			} else {
				if(!getApp().globalData.hasLogin){
					this.$u.route({
						url: '/pages/home/login',
					})
				}
			}
		},
		onLoad(e) {
			this.option = e
			if (getApp().globalData.hasLogin && !getApp().globalData.hasLaunch) {
				this.getdata()
			}
		},
		onPullDownRefresh() {
			console.log('refresh');
			setTimeout(function () {
				uni.stopPullDownRefresh();
			}, 1000);
		},
		methods: {
			getdata(){
				this.tabs[0].list = this.$defalutdata.servergory
				this.tabs[1].tabbar = this.$defalutdata.category
				this.tabs[2].tablist[0].newslist = this.$defalutdata.news
				this.tabs[2].tablist[1].newslist = this.$defalutdata.news.reverse()
				this.current = parseInt(this.option.id)||0
				this.swiperCurrent = this.current
				this.newslist = this.tabs[2].tablist[0].newslist
				setTimeout(() => {
					this.getMenuItemTop();
				}, 500);
			},
			navto(url,id){
				this.$u.route({
					url,
					params: {
						id: id
					}
				})
			},
			tabsChange(index) {
				this.swiperCurrent = index;
			},
			transition(e) {
				let dx = e.detail.dx;
				this.$refs.tabs.setDx(dx);
			},
			animationfinish(e) {
				let current = e.detail.current;
				this.$refs.tabs.setFinishCurrent(current);
				this.swiperCurrent = current;
				this.current = current;
			},
			newstabsChange(index) {
				this.newscurrent = index;
				this.newslist = []
				var that = this
				setTimeout(function() {
					that.newslist = that.tabs[2].tablist[index].newslist
				}, 1000);
			},
			// 点击左边的栏目切换
			async swichMenu(index) {
				if(this.arr.length == 0) {
					await this.getMenuItemTop();
				}
				if (index == this.categorycurrent) return;
				this.scrollRightTop = this.oldScrollTop;
				this.$nextTick(function(){
					this.scrollRightTop = this.arr[index];
					this.categorycurrent = index;
					this.leftMenuStatus(index);
				})
			},
			// 获取一个目标元素的高度
			getElRect(elClass, dataVal) {
				new Promise((resolve, reject) => {
					const query = uni.createSelectorQuery().in(this);
					query.select('.' + elClass).fields({
						size: true
					}, res => {
						// 如果节点尚未生成，res值为null，循环调用执行
						if (!res) {
							setTimeout(() => {
								this.getElRect(elClass);
							}, 10);
							return;
						}
						this[dataVal] = res.height;
						resolve();
					}).exec();
				})
			},
			// 观测元素相交状态
			async observer() {
				this.tabs[1].tabbar.map((val, index) => {
					let observer = uni.createIntersectionObserver(this);
					// 检测右边scroll-view的id为itemxx的元素与right-box的相交状态
					// 如果跟.right-box底部相交，就动态设置左边栏目的活动状态
					observer.relativeTo('.right-box', {
						top: 0
					}).observe('#item' + index, res => {
						if (res.intersectionRatio > 0) {
							let id = res.id.substring(4);
							this.leftMenuStatus(id);
						}
					})
				})
			},
			// 设置左边菜单的滚动状态
			async leftMenuStatus(index) {
				this.categorycurrent = index;
				// 如果为0，意味着尚未初始化
				if (this.menuHeight == 0 || this.menuItemHeight == 0) {
					await this.getElRect('menu-scroll-view', 'menuHeight');
					await this.getElRect('u-tab-item', 'menuItemHeight');
				}
				// 将菜单活动item垂直居中
				this.scrollTop = index * this.menuItemHeight + this.menuItemHeight / 2 - this.menuHeight / 2;
			},
			// 获取右边菜单每个item到顶部的距离
			getMenuItemTop() {
				new Promise(resolve => {
					let selectorQuery = uni.createSelectorQuery();
					selectorQuery.selectAll('.class-item').boundingClientRect((rects) => {
						// 如果节点尚未生成，rects值为[](因为用selectAll，所以返回的是数组)，循环调用执行
						if(!rects.length) {
							setTimeout(() => {
								this.getMenuItemTop();
							}, 10);
							return ;
						}
						rects.forEach((rect) => {
							// 这里减去rects[0].top，是因为第一项顶部可能不是贴到导航栏(比如有个搜索框的情况)
							this.arr.push(rect.top - rects[0].top);
							resolve();
						})
					}).exec()
				})
			},
			// 右边菜单滚动
			async rightScroll(e) {
				this.oldScrollTop = e.detail.scrollTop;
				if(this.arr.length == 0) {
					await this.getMenuItemTop();
				}
				if(this.timer) return ;
				if(!this.menuHeight) {
					await this.getElRect('menu-scroll-view', 'menuHeight');
				}
				setTimeout(() => { // 节流
					this.timer = null;
					// scrollHeight为右边菜单垂直中点位置
					let scrollHeight = e.detail.scrollTop + this.menuHeight / 2;
					for (let i = 0; i < this.arr.length; i++) {
						let height1 = this.arr[i];
						let height2 = this.arr[i + 1];
						// 如果不存在height2，意味着数据循环已经到了最后一个，设置左边菜单为最后一项即可
						if (!height2 || scrollHeight >= height1 && scrollHeight < height2) {
							this.leftMenuStatus(i);
							return ;
						}
					}
				}, 10)
			}
		}
	}
</script>

<style lang="scss">
	page{
		display: flex;
	}
	.page{
		flex: 1;
		background: #f9f9f9;
		.tabswiper{
			flex: 1;
			.swiper_scroll{
				height: 100%;
			}
		}
	}
	
	.u-menu-wrap {
		flex: 1;
		display: flex;
		overflow: hidden;
		flex-direction: row;
		.u-search-inner {
			background-color: rgb(234, 234, 234);
			border-radius: 100rpx;
			display: flex;
			align-items: center;
			padding: 10rpx 16rpx;
		}
		
		.u-search-text {
			font-size: 26rpx;
			color: $u-tips-color;
			margin-left: 10rpx;
		}
		
		.u-tab-view {
			width: 200rpx;
			height: 100%;
		}
		
		.u-tab-item {
			height: 110rpx;
			background: #f6f6f6;
			box-sizing: border-box;
			display: flex;
			align-items: center;
			justify-content: center;
			font-size: 26rpx;
			color: #444;
			font-weight: 400;
			line-height: 1;
		}
		
		.u-tab-item-active {
			position: relative;
			color: #000;
			font-size: 30rpx;
			font-weight: 600;
			background: #fff;
		}
		
		.u-tab-item-active::before {
			content: "";
			position: absolute;
			border-left: 4px solid $photo-defalut;
			height: 32rpx;
			left: 0;
			top: 39rpx;
		}
		
		.u-tab-view {
			height: 100%;
		}
		
		.right-box {
			background-color: rgb(250, 250, 250);
			flex: 1;
		}
		
		.page-view {
			padding: 16rpx;
		}
		
		.class-item {
			margin-bottom: 30rpx;
			background-color: #fff;
			padding: 16rpx;
			border-radius: 8rpx;
		}
		
		.class-item:last-child {
			//min-height: 100vh;
		}
		
		.item-title {
			font-size: 26rpx;
			color: $u-main-color;
			font-weight: bold;
		}
		
		.item-menu-name {
			font-weight: normal;
			font-size: 24rpx;
			color: $u-main-color;
		}
		
		.item-container {
			display: flex;
			flex-wrap: wrap;
			flex-direction: row;
		}
		
		.thumb-box {
			width: 33.333333%;
			display: flex;
			align-items: center;
			justify-content: center;
			flex-direction: column;
			margin-top: 20rpx;
		}
		
		.item-menu-image {
			width: 120rpx;
			height: 120rpx;
		}
	}
	
	
	.card{
		margin: 15rpx;
		padding: 15rpx;
		border-radius: 10rpx;
		flex-direction: row;
		background: #fff;
		align-items: center;
		color:#333;
		.cardtitle{
			font-size: 40rpx;
			margin: 30rpx;
		}
		.carddesc{
			font-size: 20rpx;
			margin: 30rpx;
		}
		.cardgo{
			width: 80rpx;
			height: 80rpx;
			padding: 20rpx;
			border-radius: 50%;
			background: rgba(0,0,0,.05);
		}
	}
	
	.news_scroll{
		height: 100%;
		padding-bottom: 60rpx;
	}
	.newspage{
		background: #f9f9f9;
		padding: 20rpx;
		.newsitem{
			background: #fff;
			padding: 15rpx;
			margin-bottom: 20rpx;
			color: #777;
			.title{
				font-size: 36rpx;
				line-height: 60rpx;
				height: 120rpx;
				lines:2;
				overflow: hidden;
				-webkit-box-orient:vertical;
				-webkit-line-clamp:2;
				text-overflow:ellipsis;
				color: #333;
			}
			.image{
				margin-left: 20rpx;
			}
		}
	}
</style>
